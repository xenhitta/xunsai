local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Check if configuration exists
if not getgenv().Owner then
    getgenv().Owner = "Thisneed0122" -- Default owner
    warn("Owner not set, using default")
end

if not getgenv().Configuration then
    getgenv().Configuration = {
        ['CrewID'] = 32570691,
        ['AntiStomp'] = true,
        ['LowGraphic'] = true,
        ['HideScreen'] = false,
        ['CustomPrefix'] = "!",
        ['Fpscap'] = 60
    }
    warn("Configuration not set, using defaults")
end

if not getgenv().Animations then
    getgenv().Animations = {
        ['Floss'] = "rbxassetid://5917459365",
        ['Dolphin'] = "rbxassetid://5918726674"
    }
end

-- Apply FPS cap
if getgenv().Configuration['Fpscap'] and type(getgenv().Configuration['Fpscap']) == "number" then
    setfpscap(getgenv().Configuration['Fpscap'])
    print("FPS cap set to: " .. getgenv().Configuration['Fpscap'])
end

-- Apply low graphics
if getgenv().Configuration['LowGraphic'] then
    local lighting = game:GetService("Lighting")
    lighting.GlobalShadows = false
    lighting.FogEnd = 9e9
    
    settings().Rendering.QualityLevel = 1
    
    for i, v in pairs(game:GetDescendants()) do
        if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
            v.Material = "Plastic"
            v.Reflectance = 0
        elseif v:IsA("Decal") then
            v.Transparency = 1
        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
            v.Lifetime = NumberRange.new(0)
        elseif v:IsA("Explosion") then
            v.BlastPressure = 1
            v.BlastRadius = 1
        end
    end
    
    print("Low graphics mode enabled")
end

-- Initialize framework
local framework = {
    connections = {},
    botActive = true,
    summonLoop = nil,
    commandUsers = {},
    flossActive = false,
    flossTrack = nil,
    dolphinActive = false,
    dolphinTrack = nil
}

local ownerName = getgenv().Owner
local gun = nil

-- Setup whitelist from configuration
if getgenv().Whitelist then
    for _, username in ipairs(getgenv().Whitelist) do
        framework.commandUsers[username] = true
    end
end

if getgenv().api and getgenv().Options and getgenv().Options.ragebot_targets then
    local tab = getgenv().api:AddTab("Stand Bot")
    local groupbox = tab:AddLeftGroupbox("Bot")
    local values = getgenv().Options.ragebot_targets.Value or {}
    local whitelist = getgenv().Options.targeting_whitelist or {}
    local ragehitelist = getgenv().Options.ragebot_whitelist or {}
    local settings = getgenv().Options.ragebot_settings.Value or {}

    groupbox:AddToggle("bot_toggle", { Text = "Enabled", Default = true })

    local key = getgenv().Options.ragebot_keybind
    if key then
        key:SetValue({ key.Value, "Always" })
        if getgenv().Toggles then
            getgenv().Toggles.ragebot_enabled:SetValue(true)
            getgenv().Toggles.ragebot_use_selected:SetValue(true)
        end
    end

    gun = getgenv().Options.ragebot_weapon
    if gun then
        gun:SetValue("[Rifle]")
    else
        print("Gun object is nil")
    end

    local silentkey = getgenv().Options.silent_keybind
    if silentkey then
        silentkey:SetValue({ silentkey.Value, "Always" })
        if getgenv().Toggles and getgenv().Toggles.silent_toggle then
            getgenv().Toggles.silent_toggle:SetValue(true)
        else
            print("getgenv().Toggles.silent_toggle or getgenv().Toggles is nil")
        end
    end

    local ragebot = getgenv().Toggles.ragebot_enabled
    whitelist[ownerName] = true
    ragehitelist[ownerName] = true
    getgenv().Options.ragebot_whitelist:SetValue(ragehitelist)
    getgenv().Options.targeting_whitelist:SetValue(whitelist)
    framework.commandUsers[ownerName] = true
end

if getgenv().Toggles and getgenv().Toggles.bot_toggle then
    table.insert(framework.connections, RunService.Heartbeat:Connect(function()
        framework.botActive = getgenv().Toggles.bot_toggle.Value
    end))
else
    print("Toggles.bot_toggle is nil")
end

-- Animation setup
local flossAnimation = Instance.new("Animation")
flossAnimation.AnimationId = getgenv().Animations['Floss']

-- Dolphin animation setup
local dolphinAnimation = Instance.new("Animation")
dolphinAnimation.AnimationId = getgenv().Animations['Dolphin']

local function toggleFloss()
    if framework.flossActive then
        -- Stop the floss animation
        if framework.flossTrack then
            framework.flossTrack:Stop()
            framework.flossTrack = nil
        end
        framework.flossActive = false
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Stopped flossing.", "All")
    else
        -- Stop dolphin animation if it's running
        if framework.dolphinActive and framework.dolphinTrack then
            framework.dolphinTrack:Stop()
            framework.dolphinTrack = nil
            framework.dolphinActive = false
        end
        
        -- Start the floss animation
        local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if humanoid and humanoid:FindFirstChild("Animator") then
            framework.flossTrack = humanoid.Animator:LoadAnimation(flossAnimation)
            framework.flossTrack:Play()
            framework.flossTrack.Looped = true
            framework.flossActive = true
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Started flossing.", "All")
        else
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Error: Cannot floss (character or animator not found).", "All")
        end
    end
end

-- Dolphin emote toggle function
local function toggleDolphin()
    if framework.dolphinActive then
        -- Stop the dolphin animation
        if framework.dolphinTrack then
            framework.dolphinTrack:Stop()
            framework.dolphinTrack = nil
        end
        framework.dolphinActive = false
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Stopped dolphin emote.", "All")
    else
        -- Stop floss animation if it's running
        if framework.flossActive and framework.flossTrack then
            framework.flossTrack:Stop()
            framework.flossTrack = nil
            framework.flossActive = false
        end
        
        -- Start the dolphin animation
        local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if humanoid and humanoid:FindFirstChild("Animator") then
            framework.dolphinTrack = humanoid.Animator:LoadAnimation(dolphinAnimation)
            framework.dolphinTrack:Play()
            framework.dolphinTrack.Looped = true
            framework.dolphinActive = true
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Started dolphin emote.", "All")
        else
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Error: Cannot do dolphin emote (character or animator not found).", "All")
        end
    end
end

-- Improved function to reset character server-side
local function resetCharacter()
    if LocalPlayer.Character then
        -- Method 1: Use Humanoid's Health property (server-side)
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Health = 0
        end
        
        -- Method 2: Use Players:ResetCharacter() API (more reliable server-side method)
        LocalPlayer:ChangeState(Enum.HumanoidStateType.Dead)
        
        -- Method 3: Call the client-side reset function
        game:GetService("Players").LocalPlayer.Character:Remove()
        
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Character reset initiated.", "All")
    else
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Error: Cannot reset character (character not found).", "All")
    end
end

-- New function to show version
local function showVersion()
    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Stand Bot v1.0", "All")
end

local function handleGunMode(message)
    local prefix = getgenv().Configuration['CustomPrefix'] or "!"
    if string.sub(message, 1, #prefix + 4) == prefix .. "gun " then
        local gunName = string.sub(message, #prefix + 5):lower()
        local gunMap = {
            rifle = "[Rifle]",
            lmg = "[LMG]",
            aug = "[AUG]",
        }
        if gunMap[gunName] then
            if gun then
                gun:SetValue(gunMap[gunName])
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Gun mode set to " .. gunMap[gunName], "All")
            else
                print("Gun object is nil. Gun mode change failed.")
            end
        else
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Invalid gun name.", "All")
            print("Invalid gun name.")
        end
    end
end

local function addAllPlayersToRagebotTargets()
    getgenv().Toggles.ragebot_use_selected:SetValue(false)
    getgenv().Options.ragebot_enabled:SetValue(true)
    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Added all players to ragebot targets.", "All")
end

local function removeAllPlayersFromRagebotTargets()
    getgenv().Toggles.ragebot_use_selected:SetValue(true)
    getgenv().Options.ragebot_targets:SetValue({})
    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Removed all players from ragebot targets.", "All")
end

local function removeAllPlayersFromWhitelist()
    local whitelist = { [ownerName] = true }
    local ragewhitelist = { [ownerName] = true }
    framework.commandUsers = { {} }
    framework.commandUsers = { [ownerName] = true }
    getgenv().Options.targeting_whitelist:SetValue(whitelist)
    getgenv().Options.ragebot_whitelist:SetValue(ragewhitelist)
    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Removed all players from whitelist.", "All")
end

local function findPlayer(playerName)
    local player = Players:FindFirstChild(playerName)
    if player then
        return player
    end

    local foundPlayers = {}
    local lowerPlayerName = playerName:lower()
    for _, p in ipairs(Players:GetPlayers()) do
        if string.find(p.Name:lower(), lowerPlayerName) or string.find(p.DisplayName:lower(), lowerPlayerName) then
            table.insert(foundPlayers, p)
        end
    end

    if #foundPlayers == 1 then
        return foundPlayers[1]
    elseif #foundPlayers > 1 then
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Multiple players found matching '" .. playerName .. "'. Please be more specific.", "All")
        print("Multiple players found matching '" .. playerName .. "'. Please be more specific.")
        return nil
    else
        return nil
    end
end

local function handleAddPlayerCommand(message)
    local prefix = getgenv().Configuration['CustomPrefix'] or "!"
    if string.sub(message, 1, #prefix + 4) == prefix .. "add " then
        local partialName = string.sub(message, #prefix + 5)
        local foundPlayer = findPlayer(partialName)
        if foundPlayer and getgenv().Options and getgenv().Options.ragebot_targets then
            local rageEnabled = getgenv().Toggles.ragebot_enabled.Value
            getgenv().Options.ragebot_targets.Value[foundPlayer.Name] = true
            getgenv().Options.ragebot_targets:SetValue(getgenv().Options.ragebot_targets.Value)
            if not rageEnabled then
                getgenv().Toggles.ragebot_enabled:SetValue(true)
            end
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Added " .. foundPlayer.Name .. " to ragebot targets.", "All")
        end
    end
end

local function handleWhitelist(message)
    local prefix = getgenv().Configuration['CustomPrefix'] or "!"
    if string.sub(message, 1, #prefix + 10) == prefix .. "whitelist " then
        local partialName = string.sub(message, #prefix + 11)
        local foundPlayer = findPlayer(partialName)
        if foundPlayer and getgenv().Options and getgenv().Options.targeting_whitelist then
            whitelist = getgenv().Options.targeting_whitelist.Value or {}
            whitelist[foundPlayer.Name] = true
            ragewhitelist = getgenv().Options.ragebot_whitelist.Value or {}
            ragewhitelist[foundPlayer.Name] = true
            framework.commandUsers[foundPlayer.Name] = true
            getgenv().Options.targeting_whitelist:SetValue(whitelist)
            getgenv().Options.ragebot_whitelist:SetValue(ragewhitelist)
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Whitelisted " .. foundPlayer.Name .. ".", "All")
        end
    end
end

local function teleportToSpeaker(speaker)
    if not speaker then
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Error: Speaker is nil.", "All")
        print("Error: Speaker is nil.")
        return
    end

    local speakerCharacter = speaker.Character
    if not speakerCharacter or not speakerCharacter.PrimaryPart then
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Error: Speaker's character or PrimaryPart not found.", "All")
        print("Error: Speaker's character or PrimaryPart not found.")
        return
    end

    local speakerCFrame = speakerCharacter.PrimaryPart.CFrame
    local angle = math.random() * 2 * math.pi
    local radius = 10
    local heightOffset = 0

    local randomX = radius * math.cos(angle)
    local randomZ = radius * math.sin(angle)
    local randomPosition = speakerCFrame * CFrame.new(randomX, heightOffset, randomZ)

    local head = speakerCharacter:FindFirstChild("Head")
    local lookAtCFrame = head and CFrame.lookAt(randomPosition.p, head.Position) or CFrame.lookAt(randomPosition.p, speakerCFrame.p)

    getgenv().Toggles.ragebot_enabled:SetValue(false)

    if LocalPlayer.Character then
        LocalPlayer.Character:PivotTo(lookAtCFrame)
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Summoned by " .. speaker.Name .. ".", "All")
    else
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Error: Local player's character not found.", "All")
        print("Error: Local player's character not found.")
    end

    if not head then
        print("Target head not found. Aiming at primary part instead.")
    end
end

local function handleVoidCommand(enable)
    if getgenv().Toggles and getgenv().Toggles.ragebot_enabled then
        getgenv().Toggles.ragebot_enabled:SetValue(enable)
        if enable then
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("YOUVE JUST BEEN SNIPED /xdhc.", "All")
        else
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Ragebot disabled.", "All")
        end
    end
end

local function handleChat(message, speakerName)
    if framework.botActive and (framework.commandUsers[speakerName] or speakerName == ownerName) then
        local prefix = getgenv().Configuration['CustomPrefix'] or "!"
        local commands = {
            [prefix .. "ka"] = addAllPlayersToRagebotTargets,
            [prefix .. "stop"] = removeAllPlayersFromRagebotTargets,
            [prefix .. "unwhitelist"] = removeAllPlayersFromWhitelist,
            [prefix .. "s"] = function(msg, speaker) teleportToSpeaker(Players:FindFirstChild(speaker)) end,
            [prefix .. "void"] = function() handleVoidCommand(true) end,
            [prefix .. "unvoid"] = function() handleVoidCommand(false) end,
            [prefix .. "gun "] = handleGunMode,
            [prefix .. "add "] = handleAddPlayerCommand,
            [prefix .. "whitelist "] = handleWhitelist,
            [prefix .. "floss"] = toggleFloss,
            [prefix .. "dolphin"] = toggleDolphin,
            [prefix .. "fix"] = resetCharacter,
            [prefix .. "version"] = showVersion
        }
        
        for cmd, func in pairs(commands) do
            if string.sub(message, 1, #cmd) == cmd then
                func(message, speakerName)
                return
            end
        end
    end
end

local function setupChatListeners()
    for _, player in ipairs(Players:GetPlayers()) do
        player.Chatted:Connect(function(message)
            handleChat(message, player.Name)
        end)
    end
end

setupChatListeners()

Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(message)
        handleChat(message, player.Name)
    end)
end)

-- Character added listener to recreate animations if they were active
LocalPlayer.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid")
    if humanoid and humanoid:FindFirstChild("Animator") then
        -- Restore floss animation if it was active
        if framework.flossActive then
            framework.flossTrack = humanoid.Animator:LoadAnimation(flossAnimation)
            framework.flossTrack:Play()
            framework.flossTrack.Looped = true
        end
        
        -- Restore dolphin animation if it was active
        if framework.dolphinActive then
            framework.dolphinTrack = humanoid.Animator:LoadAnimation(dolphinAnimation)
            framework.dolphinTrack:Play()
            framework.dolphinTrack.Looped = true
        end
    end
end)

if getgenv().api then
    function api:Unload()
        for _, connection in framework.connections do
            connection:Disconnect()
        end
        -- Stop animations if active
        if framework.flossTrack then
            framework.flossTrack:Stop()
        end
        if framework.dolphinTrack then
            framework.dolphinTrack:Stop()
        end
        table.clear(framework)
    end
end

print("Stand Bot loaded successfully!")

-- Anti-stomp check
if getgenv().Configuration['AntiStomp'] then
    print("Anti-stomp enabled")
    -- Implement your anti-stomp functionality here
end

-- Hide screen check
if getgenv().Configuration['HideScreen'] then
    print("Screen hiding enabled")
    -- Implement your screen hiding functionality here
end
